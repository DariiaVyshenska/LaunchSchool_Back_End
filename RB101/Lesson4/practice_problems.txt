1) 
[1, 2, 3]
because each loop will be evaluated to true (because 'hi' will be evaluated to 
true, since it is not nil and not false). therefore all the elements will be 
selected
2)
we can find the answer in the ruby documentation: Array#count.
https://ruby-doc.org/core-2.7.2/Array.html#method-i-count
"If a block is given, counts the number of elements for which the block returns 
a true value."
here, return value will be 1 (integer)
3)
[1, 2, 3]
according to ruby API, regect returns the elements for which the given block 
evaluates to not true (why not false?). Anyway. since return value of puts is 
always nil, for every block evaluation the return value will be nil and therefore
all the elements of the array will be returned by Array#regect.
4)
{"a"=>"ant", "b"=>"bear", "c"=>"cat"} 
the method Enumerable#each_with_object here takes an object (here - empty hash)
and an array. for each element of the array it takes the 0th character of
the string and uses it as the key for the hash. for that key in the hash it 
assignes the full string (element of the array) as the value. the code
will return a populated hash.
5)
[[:a, "ant"]]
Hash#shift removes the first key-value pair and returns it as a two item array
6)
11
we are piping two methods - Array#pop & String#size. we are removing and returning
the last element of the array with #pop (which is 'caterpillar') and then getting
it's size (which is 11, 11 characters long)
7)
~What is the block's return value in the following code?
true, false, true
~How is it determined?
two things are done in the block:
  - puts num will return nil every time
  - num.odd? will return true if number is odd and false if number is not odd
Since #odd? call is the last, then what #odd? returs will be returned by each
call of the block
~Also, what is the return value of any? in this code and what does it output?
return value of any is either true (if at least one block run was truthful) or
false (if none of the block runs was evaluated as truthful)
it outputs 'true' since we have two block runs evaluated to true
8)
~How does take work?
the call from the exercise will return [1, 2]
according to the API, Array#take returns first n elements from the receiver 
array. There is no information on wether it is distructive or now.
~Is it destructive? How can we find out?
The API does not say which probably means it is not distructive. But to make
sure I do a quick test of this method in irb and it turns out to be not distructive.
9)
~What is the return value of map in the following code?
did not predict the nil value but it does make sence!
map runs the block on each element of the array. So if statement is run on every
element. if the condition for the element evaluates to true, then that value
is returned. But if it is evaluated to false, then if statement returns 'nil'.
In our case, there are two key-value pairs. First evaluated to false and nil is 
returned, second is evalueated to true, therefore the value of the key-value pair
is returned.
the final return is an array (which is stated in Enumerable#map documentation)
10)
[1, nil, nil]
for each element of the array, map runs the block. in the block we have if-else
statement. if condition in if statement evaluates to true, then nil is 
returned (puts returns nil), if it evaluates to false, then else loop is 
performed (which returns the value itself in our case)

